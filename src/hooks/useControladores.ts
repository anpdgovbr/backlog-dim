"use client"

import type { BaseQueryParams, ControladorDto } from "@anpdgovbr/shared-types"

import { useApi } from "@/lib/api"
import { replaceNumbers } from "@/utils/stringUtils"

/**
 * Par√¢metros aceitos pelo hook `useControladores`.
 *
 * Estende BaseQueryParams com filtros espec√≠ficos para controladores:
 * - cnpj: permite filtrar pelo CNPJ (string, sem formata√ß√£o esperada).
 * - nome: permite filtrar pelo nome do controlador.
 *
 * Exemplo:
 * const params: UseControladoresParams = { page: 1, pageSize: 20, cnpj: '12345678000199' }
 */
export interface UseControladoresParams extends BaseQueryParams {
  cnpj?: string
  nome?: string
}

/**
 * Resultado retornado por `useControladores`.
 *
 * - data: lista de ControladorDto (p√°gina atual).
 * - total: n√∫mero total de itens dispon√≠veis no backend.
 * - isLoading: indica carregamento inicial/atualiza√ß√£o.
 * - error: qualquer erro ocorrido durante a busca.
 * - mutate: fun√ß√£o para revalidar/atualizar os dados manualmente.
 * - getById: fun√ß√£o auxiliar que busca um √∫nico controlador por ID.
 */
export interface UseControladoresResult {
  data: ControladorDto[]
  total: number
  isLoading: boolean
  error: unknown
  mutate: () => void
  getById: (id: number) => Promise<ControladorDto | null>
}

/**
 * Hook para consultar controladores com pagina√ß√£o e filtros.
 *
 * Recebe par√¢metros de pagina√ß√£o/ordena√ß√£o e filtros (cnpj, nome) e retorna
 * dados paginados via useApi (SWR).
 *
 * Observa√ß√µes:
 * - Substitui n√∫meros no par√¢metro `search` usando `replaceNumbers` antes da query.
 * - A rota utilizada √© `/api/controladores`.
 *
 * Exemplo:
 * const { data, total, isLoading, getById } = useControladores({ page: 1, pageSize: 10, search: 'Empresa' })
 */
export function useControladores(params: UseControladoresParams): UseControladoresResult {
  const {
    page = 1,
    pageSize = 10,
    search = "",
    orderBy = "nome",
    ascending = true,
    cnpj,
    nome,
  } = params

  const query = new URLSearchParams({
    page: String(page),
    pageSize: String(pageSize),
    search: replaceNumbers(search),
    orderBy,
    ascending: String(ascending),
  })

  if (cnpj) query.set("cnpj", cnpj)
  if (nome) query.set("nome", nome)

  const key = `/api/controladores?${query.toString()}`

  const { data, error, isLoading, mutate } = useApi<{
    data: ControladorDto[]
    total: number
  }>(key)

  // üõ† Fun√ß√£o nova para buscar um √∫nico Controlador por ID
  /**
   * Busca um controlador individual por ID usando fetch direto ao endpoint.
   *
   * Retorna o ControladorDto quando encontrado ou null em caso de erro/404.
   * Erros s√£o logados no console para auxiliar debugging no cliente.
   */
  async function getById(id: number): Promise<ControladorDto | null> {
    try {
      const resposta = await fetch(`/api/controladores/${id}`)
      if (!resposta.ok) {
        console.error(`Erro ao buscar Controlador id ${id}:`, resposta.status)
        return null
      }
      const data: ControladorDto = await resposta.json()
      return data
    } catch (err) {
      console.error("Erro inesperado ao buscar Controlador por ID:", err)
      return null
    }
  }

  return {
    data: data?.data ?? [],
    total: data?.total ?? 0,
    isLoading,
    error,
    mutate,
    getById,
  }
}
