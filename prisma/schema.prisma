generator client {
  provider = "prisma-client-js"
  seed     = "npx tsx prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Alteração em Processo
model Processo {
  id                     Int             @id @default(autoincrement())
  numero                 String          @unique
  dataCriacao            DateTime
  requerente             String?
  formaEntradaId         Int
  responsavelId          Int
  requeridoId            Int?
  requeridoFinalId       Int?            
  situacaoId             Int
  encaminhamentoId       Int?
  pedidoManifestacaoId   Int?
  contatoPrevioId        Int?
  evidenciaId            Int?
  anonimo                Boolean         @default(false)
  observacoes            String?
  temaRequerimento       String[]        @default([])
  envioPedido            DateTime?
  prazo                  Int?
  dataVencimento         DateTime?
  processoStatusId       Int?
  tipoReclamacaoId       Int?
  statusInterno          StatusInterno?
  tipoRequerimento       TipoRequerimento? 
  resumo                 String?            
  dataConclusao          DateTime?          
  dataEnvioPedido        DateTime?          
  prazoPedido            Int?               
  active                 Boolean         @default(true)
  exclusionDate          DateTime?
  contatoPrevio          ContatoPrevio?      @relation(fields: [contatoPrevioId], references: [id])
  encaminhamento         Encaminhamento?     @relation(fields: [encaminhamentoId], references: [id])
  evidencia              Evidencia?          @relation(fields: [evidenciaId], references: [id])
  formaEntrada           FormaEntrada        @relation(fields: [formaEntradaId], references: [id])
  pedidoManifestacao     PedidoManifestacao? @relation(fields: [pedidoManifestacaoId], references: [id])
  responsavel            Responsavel         @relation(fields: [responsavelId], references: [id])
  situacao               Situacao            @relation(fields: [situacaoId], references: [id])
  processoStatus         ProcessoStatus?     @relation(fields: [processoStatusId], references: [id])
  tipoReclamacao         TipoReclamacao?     @relation(fields: [tipoReclamacaoId], references: [id])

  @@map("Processo")
  @@index([active])
}

enum TipoRequerimento {
  PETICAO_TITULAR
  DENUNCIA_LGPD
}

model ProcessoStatus {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  processos     Processo[]
  active        Boolean    @default(true) 
  exclusionDate DateTime? 

  @@map("ProcessoStatus")
  @@index([active])
}

model TipoReclamacao {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  processos     Processo[]
  active        Boolean    @default(true) 
  exclusionDate DateTime? 

  @@map("TipoReclamacao")
  @@index([active])
}

enum StatusInterno {
  IMPORTADO
  NOVO
  EM_PROCESSAMENTO
  PROCESSADO
  CONSOLIDADO
}

model FormaEntrada {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  processos     Processo[]
  active        Boolean    @default(true) 
  exclusionDate DateTime?  

  @@map("FormaEntrada")
  @@index([active])
}

model Situacao {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  processos     Processo[]
  active        Boolean    @default(true) 
  exclusionDate DateTime?  

  @@map("Situacao")
  @@index([active])
}

model Encaminhamento {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  active        Boolean    @default(true) 
  exclusionDate DateTime?  
  processos     Processo[]

  @@map("Encaminhamento")
  @@index([active])
}

model PedidoManifestacao {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  processos     Processo[]
  active        Boolean    @default(true) 
  exclusionDate DateTime?  

  @@map("PedidoManifestacao")
  @@index([active])
}

model ContatoPrevio {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  active        Boolean    @default(true) 
  exclusionDate DateTime?  
  processos     Processo[]

  @@map("ContatoPrevio")
  @@index([active])
}

model Evidencia {
  id            Int        @id @default(autoincrement())
  nome          String     @unique
  active        Boolean    @default(true) 
  exclusionDate DateTime?  
  processos     Processo[]

  @@map("Evidencia")
  @@index([active])
}

model Perfil {
  id            Int         @id @default(autoincrement())
  nome          String      @unique
  permissoes    Permissao[]
  usuarios      User[]
  active        Boolean     @default(true) 
  exclusionDate DateTime?  

  // Herança de perfis (muitos-para-muitos auto-relacionado via tabela de junção)
  // Pais deste perfil (dos quais herda permissões)
  pais PerfilHeranca[] @relation("PerfilHerancaParent")
  // Filhos deste perfil (que herdam deste)
  filhos PerfilHeranca[] @relation("PerfilHerancaChild")

  @@map("Perfil")
  @@index([active])
}

model Permissao {
  id            Int       @id @default(autoincrement())
  acao          AcaoPermissao
  recurso       RecursoPermissao
  permitido     Boolean
  perfilId      Int
  perfil        Perfil    @relation(fields: [perfilId], references: [id])
  active        Boolean   @default(true)
  exclusionDate DateTime?

  @@unique([perfilId, acao, recurso])
  @@index([active])
}

model Responsavel {
  id        Int        @id @default(autoincrement())
  nome      String     @unique
  userId    String?    @unique
  user      User?      @relation("UserResponsavel", fields: [userId], references: [id])
  processos Processo[]

  active        Boolean   @default(true)
  exclusionDate DateTime?

  @@map("Responsavel")
  @@index([active])
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  perfilId Int?
  nome     String?

  responsavel Responsavel? @relation("UserResponsavel")

  perfil Perfil? @relation(fields: [perfilId], references: [id])

  active        Boolean   @default(true)
  exclusionDate DateTime?

  @@map("User")
  @@index([active])
}

// Relação de herança entre perfis (DAG): child herda de parent
model PerfilHeranca {
  parentId Int
  childId  Int

  parent Perfil @relation("PerfilHerancaParent", fields: [parentId], references: [id])
  child  Perfil @relation("PerfilHerancaChild", fields: [childId], references: [id])

  @@id([parentId, childId])
  @@map("PerfilHeranca")
}


enum AcaoAuditoria {
  CREATE
  UPDATE
  DELETE
  PATCH
  GET
}

// Enums de Permissão (RBAC)
enum AcaoPermissao {
  Exibir
  Cadastrar
  Editar
  Desabilitar
  VerHistorico
  EditarProprio
  EditarGeral
  Alterar
  Registrar
  Acessar
  Criar
}

enum RecursoPermissao {
  Processo
  Responsavel
  Metadados
  Relatorios
  Usuario
  Permissoes
  Auditoria
  Admin
}

model AuditLog {
  id          Int            @id @default(autoincrement())
  tabela      String
  acao        AcaoAuditoria  
  registroId  Int?
  userId      String?
  email       String?
  antes       Json?
  depois      Json?
  contexto    String?
  ip          String?       
  userAgent   String?        
  criadoEm    DateTime       @default(now())

  @@map("AuditLog")
}
