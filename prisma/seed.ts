import { PrismaClient } from "@prisma/client"
import { skip } from "node:test"

const prisma = new PrismaClient()

async function main() {
  console.log("üå± Iniciando Seed...")

  // ==============================
  // üåü Populando tabelas auxiliares
  // ==============================

  console.log("üîπ Criando Respons√°veis...")
  await prisma.responsavel.createMany({
    data: [
      { nome: "Camila Romero" },
      { nome: "Dagoberto Heg" },
      { nome: "Danubia Durand" },
      { nome: "Fernanda Pereira" },
      { nome: "Jean Frederick" },
      { nome: "Kelly Resqueti Paz" },
      { nome: "Tatiana Silva" },
      { nome: "Vanessa Mendes" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Formas de Entrada...")
  await prisma.formaEntrada.createMany({
    data: [
      { nome: "Ouvidoria" },
      { nome: "SEI" },
      { nome: "SEI - CIS" },
      { nome: "Sistema de Requerimentos" },
      { nome: "N√£o se aplica" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Tipos de Reclama√ß√£o...")
  await prisma.tipoReclamacao.createMany({
    data: [
      { nome: "Acesso indevido a dados pessoais" },
      { nome: "Aus√™ncia de medidas de seguran√ßa adequadas" },
      { nome: "Aus√™ncia de pol√≠tica de privacidade/cookies" },
      { nome: "Coleta excessiva de dados pessoais e/ou sens√≠veis" },
      { nome: "Compartilhamento indevido de dados pessoais e/ou sens√≠veis" },
      { nome: "Contato n√£o solicitado" },
      { nome: "Dificuldade de acesso a dados pessoais" },
      {
        nome: "Dificuldade de exercer direito de informa√ß√£o sobre uso compartilhado de dados",
      },
      {
        nome: "Dificuldade em exercer direito de acesso √†s informa√ß√µes sobre o tratamento de dados pessoais",
      },
      {
        nome: "Dificuldade em exercer direito de confirma√ß√£o da exist√™ncia de tratamento de dados",
      },
      { nome: "Dificuldade em exercer direito de corre√ß√£o de dados pessoais" },
      {
        nome: "Dificuldade em exercer direito de elimina√ß√£o de dados (inclusive tratados com consentimento)",
      },
      { nome: "Dificuldade em exercer direito de portabilidade" },
      { nome: "Dificuldade em exercer direito de revis√£o de decis√£o automatizada" },
      { nome: "Dificuldade em exercer direito de revoga√ß√£o do consentimento" },
      { nome: "Dificuldade em exercer direitos" },
      {
        nome: "Dificuldade em obter informa√ß√µes sobre cl√°usulas-padr√£o contratuais em transfer√™ncia internacional de dados pessoais",
      },
      { nome: "Exposi√ß√£o de dados pessoais e/ou sens√≠veis" },
      { nome: "Fraude" },
      { nome: "N√£o adequa√ß√£o √† LGPD" },
      { nome: "N√£o identificada" },
      { nome: "N√£o LGPD" },
      { nome: "Tratamento de dados pessoais sem hip√≥tese legal" },
      { nome: "Tratamento discriminat√≥rio/Uso de dados para fins discriminat√≥rios" },
      { nome: "Vazamento de Dados/Incidente de Seguran√ßa" },
      { nome: "Venda de dados pessoais" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Encaminhamentos...")
  await prisma.encaminhamento.createMany({
    data: [
      { nome: "Aguardando an√°lise" },
      { nome: "Cancelado pelo titular/denunciante" },
      { nome: "Cancelado por aus√™ncia de corre√ß√£o" },
      { nome: "Cancelado por duplicidade" },
      { nome: "Encaminhado para FIS" },
      { nome: "Encaminhado para TIS" },
      { nome: "Requerimento individualizado" },
      { nome: "N√£o admiss√≠vel" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Situa√ß√µes do Processamento...")
  await prisma.situacao.createMany({
    data: [
      { nome: "Em tr√¢mite - aguardando an√°lise" },
      { nome: "Em tr√¢mite - aguardando FIS/TIS" },
      { nome: "Em tr√¢mite - pedido de manifesta√ß√£o enviado" },
      { nome: "Em tr√¢mite - solicita√ß√£o de corre√ß√£o para o requerente" },
      { nome: "Em tr√¢mite - solicita√ß√£o de informa√ß√µes do encarregado" },
      {
        nome: "Encaminhado para considera√ß√£o no planejamento de fiscaliza√ß√£o/a√ß√µes educativas",
      },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Pedidos de Manifesta√ß√£o...")
  await prisma.pedidoManifestacao.createMany({
    data: [
      { nome: "Sim - Controlador Respondeu" },
      { nome: "Sim - Controlador n√£o Respondeu" },
      { nome: "N√£o se aplica" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Contatos Pr√©vios...")
  await prisma.contatoPrevio.createMany({
    data: [
      { nome: "Correio Eletr√¥nico (e-mail)" },
      { nome: "Liga√ß√£o telef√¥nica" },
      { nome: "Reclame Aqui/Procon" },
      { nome: "N/A" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Evid√™ncias...")
  await prisma.evidencia.createMany({
    data: [
      { nome: "Boletim de Ocorr√™ncia" },
      { nome: "Print de e-mail" },
      { nome: "Processo Judicial" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando ProcessoStatus...")
  await prisma.processoStatus.createMany({
    data: [
      {
        nome: "Solicita√ß√£o",
      },
      { nome: "Aguardando preenchimento do despacho" },
      { nome: "Arquivamento" },
      { nome: "Aguardando corre√ß√£o do solicitante" },
      { nome: "Conclu√≠do" },
      { nome: "Aguardando manifesta√ß√£o do controlador" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Perfis...")
  const perfis = {
    leitor: await prisma.perfil.upsert({
      where: { nome: "Leitor" },
      update: {},
      create: { nome: "Leitor" },
    }),
    atendente: await prisma.perfil.upsert({
      where: { nome: "Atendente" },
      update: {},
      create: { nome: "Atendente" },
    }),
    supervisor: await prisma.perfil.upsert({
      where: { nome: "Supervisor" },
      update: {},
      create: { nome: "Supervisor" },
    }),
    administrador: await prisma.perfil.upsert({
      where: { nome: "Administrador" },
      update: {},
      create: { nome: "Administrador" },
    }),
    superAdmin: await prisma.perfil.upsert({
      where: { nome: "SuperAdmin" },
      update: {},
      create: { nome: "SuperAdmin" },
    }),
  }

  console.log("üîπ Criando Permiss√µes...")
  const permissoes = [
    // üîπ Permiss√µes da entidade Processo (cada perfil tem sua permiss√£o individual)
    { acao: "Exibir", recurso: "Processo", permitido: true, perfilId: perfis.leitor.id },
    {
      acao: "Exibir",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes da entidade Respons√°vel
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes de Metadados (DEMAIS TABELAS DO NEGOCIO)
    { acao: "Exibir", recurso: "Metadados", permitido: true, perfilId: perfis.leitor.id },
    {
      acao: "Exibir",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes de Relat√≥rios
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes de Usuarios-pERMISSOES

    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
  ]
  // üîπ Atualiza as permiss√µes corretamente no banco
  for (const permissao of permissoes) {
    await prisma.permissao.upsert({
      where: {
        perfilId_acao_recurso: {
          perfilId: permissao.perfilId,
          acao: permissao.acao,
          recurso: permissao.recurso,
        },
      },
      update: { permitido: permissao.permitido },
      create: permissao,
    })
  }

  console.log("üîπ Criando Usu√°rios Iniciais...")
  await Promise.all([
    prisma.user.upsert({
      where: { email: "luciano.psilva@anpd.gov.br" },
      update: {},
      create: {
        email: "luciano.psilva@anpd.gov.br",
        perfilId: perfis.administrador.id,
        nome: "Luciano √âdipo",
      },
    }),
    prisma.user.upsert({
      where: { email: "fabricio.lopes@anpd.gov.br" },
      update: {},
      create: {
        email: "fabricio.lopes@anpd.gov.br",
        perfilId: perfis.administrador.id,
        nome: "Fabr√≠cio Lopes",
      },
    }),
    prisma.user.upsert({
      where: { email: "arthur.vasconcelos@anpd.gov.br" },
      update: {},
      create: {
        email: "arthur.vasconcelos@anpd.gov.br",
        perfilId: perfis.administrador.id,
        nome: "Arthur Oliveira Vasconcelos",
      },
    }),
    prisma.user.upsert({
      where: { email: "henrique.silva@anpd.gov.br" },
      update: {},
      create: {
        email: "henrique.silva@anpd.gov.br",
        perfilId: perfis.supervisor.id,
        nome: "Henrique Adriano Santos Silva",
      },
    }),
    prisma.user.upsert({
      where: { email: "thatyane.batista@anpd.gov.br" },
      update: {},
      create: {
        email: "thatyane.batista@anpd.gov.br",
        perfilId: perfis.supervisor.id,
        nome: "Thatyane Oliveira Campos Batista",
      },
    }),
    prisma.user.upsert({
      where: { email: "daniel.chaves@anpd.gov.br" },
      update: {},
      create: {
        email: "daniel.chaves@anpd.gov.br",
        nome: "Daniel Guimaraes Chaves",
        perfilId: perfis.administrador.id,
      },
    }),
    prisma.user.upsert({
      where: { email: "jorge.lima@anpd.gov.br" },
      update: {},
      create: {
        email: "jorge.lima@anpd.gov.br",
        nome: "Jorge Andre Ferreira Fontelles de Lima",
        perfilId: perfis.administrador.id,
      },
    }),
    prisma.user.upsert({
      where: { email: "gustavo.lima@anpd.gov.br" },
      update: {},
      create: {
        email: "gustavo.lima@anpd.gov.br",
        nome: "Gustavo Fernades Lima",
        perfilId: perfis.administrador.id,
      },
    }),
    prisma.user.upsert({
      where: { email: "eduardo.anjos@anpd.gov.br" },
      update: {},
      create: {
        email: "eduardo.anjos@anpd.gov.br",
        nome: "Eduardo Anjos",
        perfilId: perfis.administrador.id,
      },
    }),
  ])

  console.log("‚úÖ Seed aplicado com sucesso!")
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(() => {
    prisma.$disconnect()
  })
