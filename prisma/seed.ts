import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

async function main() {
  console.log("üå± Iniciando Seed...")

  // ==============================
  // üåü Populando tabelas auxiliares
  // ==============================

  console.log("üîπ Criando Respons√°veis a partir de SEED_RESPONSAVEIS_JSON...")
  if (process.env.SEED_RESPONSAVEIS_JSON) {
    try {
      const responsaveis = JSON.parse(process.env.SEED_RESPONSAVEIS_JSON)
      if (
        Array.isArray(responsaveis) &&
        responsaveis.every((r) => typeof r.nome === "string")
      ) {
        await prisma.responsavel.createMany({
          data: responsaveis,
          skipDuplicates: true,
        })
        console.log(`‚úÖ ${responsaveis.length} Respons√°veis criados.`)
      } else {
        console.error(
          "‚ùå SEED_RESPONSAVEIS_JSON n√£o √© um array de objetos com a chave 'nome'."
        )
      }
    } catch (error) {
      console.error(
        "‚ùå Erro ao processar SEED_RESPONSAVEIS_JSON. Verifique o formato do JSON.",
        error
      )
    }
  } else {
    console.log(
      "‚è© SEED_RESPONSAVEIS_JSON n√£o definido. Pulando cria√ß√£o de respons√°veis."
    )
  }

  console.log("üîπ Criando Formas de Entrada...")
  await prisma.formaEntrada.createMany({
    data: [
      { nome: "Ouvidoria" },
      { nome: "SEI" },
      { nome: "SEI - CIS" },
      { nome: "Sistema de Requerimentos" },
      { nome: "N√£o se aplica" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Tipos de Reclama√ß√£o...")
  await prisma.tipoReclamacao.createMany({
    data: [
      { nome: "Acesso indevido a dados pessoais" },
      { nome: "Aus√™ncia de medidas de seguran√ßa adequadas" },
      { nome: "Aus√™ncia de pol√≠tica de privacidade/cookies" },
      { nome: "Coleta excessiva de dados pessoais e/ou sens√≠veis" },
      { nome: "Compartilhamento indevido de dados pessoais e/ou sens√≠veis" },
      { nome: "Contato n√£o solicitado" },
      { nome: "Dificuldade de acesso a dados pessoais" },
      {
        nome: "Dificuldade de exercer direito de informa√ß√£o sobre uso compartilhado de dados",
      },
      {
        nome: "Dificuldade em exercer direito de acesso √†s informa√ß√µes sobre o tratamento de dados pessoais",
      },
      {
        nome: "Dificuldade em exercer direito de confirma√ß√£o da exist√™ncia de tratamento de dados",
      },
      { nome: "Dificuldade em exercer direito de corre√ß√£o de dados pessoais" },
      {
        nome: "Dificuldade em exercer direito de elimina√ß√£o de dados (inclusive tratados com consentimento)",
      },
      { nome: "Dificuldade em exercer direito de portabilidade" },
      { nome: "Dificuldade em exercer direito de revis√£o de decis√£o automatizada" },
      { nome: "Dificuldade em exercer direito de revoga√ß√£o do consentimento" },
      { nome: "Dificuldade em exercer direitos" },
      {
        nome: "Dificuldade em obter informa√ß√µes sobre cl√°usulas-padr√£o contratuais em transfer√™ncia internacional de dados pessoais",
      },
      { nome: "Exposi√ß√£o de dados pessoais e/ou sens√≠veis" },
      { nome: "Fraude" },
      { nome: "N√£o adequa√ß√£o √† LGPD" },
      { nome: "N√£o identificada" },
      { nome: "N√£o LGPD" },
      { nome: "Tratamento de dados pessoais sem hip√≥tese legal" },
      { nome: "Tratamento discriminat√≥rio/Uso de dados para fins discriminat√≥rios" },
      { nome: "Vazamento de Dados/Incidente de Seguran√ßa" },
      { nome: "Venda de dados pessoais" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Encaminhamentos...")
  await prisma.encaminhamento.createMany({
    data: [
      { nome: "Aguardando an√°lise" },
      { nome: "Cancelado pelo titular/denunciante" },
      { nome: "Cancelado por aus√™ncia de corre√ß√£o" },
      { nome: "Cancelado por duplicidade" },
      { nome: "Encaminhado para FIS" },
      { nome: "Encaminhado para TIS" },
      { nome: "Requerimento individualizado" },
      { nome: "N√£o admiss√≠vel" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Situa√ß√µes do Processamento...")
  await prisma.situacao.createMany({
    data: [
      { nome: "Em tr√¢mite - aguardando an√°lise" },
      { nome: "Em tr√¢mite - aguardando FIS/TIS" },
      { nome: "Em tr√¢mite - pedido de manifesta√ß√£o enviado" },
      { nome: "Em tr√¢mite - solicita√ß√£o de corre√ß√£o para o requerente" },
      { nome: "Em tr√¢mite - solicita√ß√£o de informa√ß√µes do encarregado" },
      {
        nome: "Encaminhado para considera√ß√£o no planejamento de fiscaliza√ß√£o/a√ß√µes educativas",
      },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Pedidos de Manifesta√ß√£o...")
  await prisma.pedidoManifestacao.createMany({
    data: [
      { nome: "Sim - Controlador Respondeu" },
      { nome: "Sim - Controlador n√£o Respondeu" },
      { nome: "N√£o se aplica" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Contatos Pr√©vios...")
  await prisma.contatoPrevio.createMany({
    data: [
      { nome: "Correio Eletr√¥nico (e-mail)" },
      { nome: "Liga√ß√£o telef√¥nica" },
      { nome: "Reclame Aqui/Procon" },
      { nome: "N/A" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Evid√™ncias...")
  await prisma.evidencia.createMany({
    data: [
      { nome: "Boletim de Ocorr√™ncia" },
      { nome: "Print de e-mail" },
      { nome: "Processo Judicial" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando ProcessoStatus...")
  await prisma.processoStatus.createMany({
    data: [
      {
        nome: "Solicita√ß√£o",
      },
      { nome: "Aguardando preenchimento do despacho" },
      { nome: "Arquivamento" },
      { nome: "Aguardando corre√ß√£o do solicitante" },
      { nome: "Conclu√≠do" },
      { nome: "Aguardando manifesta√ß√£o do controlador" },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Perfis...")
  const perfis = {
    leitor: await prisma.perfil.upsert({
      where: { nome: "Leitor" },
      update: {},
      create: { nome: "Leitor" },
    }),
    atendente: await prisma.perfil.upsert({
      where: { nome: "Atendente" },
      update: {},
      create: { nome: "Atendente" },
    }),
    supervisor: await prisma.perfil.upsert({
      where: { nome: "Supervisor" },
      update: {},
      create: { nome: "Supervisor" },
    }),
    administrador: await prisma.perfil.upsert({
      where: { nome: "Administrador" },
      update: {},
      create: { nome: "Administrador" },
    }),
    superAdmin: await prisma.perfil.upsert({
      where: { nome: "SuperAdmin" },
      update: {},
      create: { nome: "SuperAdmin" },
    }),
  }

  // üîπ Heran√ßa de Perfis (SuperAdmin > Administrador > Supervisor > Atendente > Leitor)
  // A heran√ßa apenas ADICIONA permiss√µes; nega√ß√µes n√£o removem concess√µes herdadas.
  console.log("üîπ Configurando heran√ßa de perfis...")
  await prisma.perfilHeranca.createMany({
    data: [
      { parentId: perfis.administrador.id, childId: perfis.superAdmin.id },
      { parentId: perfis.supervisor.id, childId: perfis.administrador.id },
      { parentId: perfis.atendente.id, childId: perfis.supervisor.id },
      { parentId: perfis.leitor.id, childId: perfis.atendente.id },
    ],
    skipDuplicates: true,
  })

  console.log("üîπ Criando Permiss√µes...")
  const permissoes = [
    // üîπ Permiss√µes da entidade Processo (cada perfil tem sua permiss√£o individual)
    { acao: "Exibir", recurso: "Processo", permitido: true, perfilId: perfis.leitor.id },
    {
      acao: "Exibir",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "VerHistorico",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // RBAC/ABAC: edi√ß√£o do pr√≥prio Processo (usado no ABAC do PUT /api/processos/[id])
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "EditarProprio",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // RBAC: edi√ß√£o geral de Processo (sem restri√ß√£o por usu√°rio)
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "EditarGeral",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Processo",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes da entidade Respons√°vel
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Editar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Responsavel",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Acessar",
      recurso: "Admin",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes de Metadados (DEMAIS TABELAS DO NEGOCIO)
    { acao: "Exibir", recurso: "Metadados", permitido: true, perfilId: perfis.leitor.id },
    {
      acao: "Exibir",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Cadastrar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Editar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Metadados",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes de Relat√≥rios
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Criar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Editar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Desabilitar",
      recurso: "Relatorios",
      permitido: true,
      perfilId: perfis.administrador.id,
    },

    // üîπ Permiss√µes de Usuarios-pERMISSOES

    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Exibir",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Alterar",
      recurso: "Usuario",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: false,
      perfilId: perfis.leitor.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: false,
      perfilId: perfis.atendente.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: false,
      perfilId: perfis.supervisor.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Alterar",
      recurso: "Permissoes",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },

    // üîπ Auditoria (RBAC dedicado)
    {
      acao: "Exibir",
      recurso: "Auditoria",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Exibir",
      recurso: "Auditoria",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
    {
      acao: "Registrar",
      recurso: "Auditoria",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Registrar",
      recurso: "Auditoria",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },

    // üîπ Gate Admin sem√¢ntico
    // Gate Admin sem√¢ntico (protege layout e rotas admin)
    {
      acao: "Acessar",
      recurso: "Admin",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Acessar",
      recurso: "Admin",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },

    // üîπ Consulta de permiss√µes por perfil (Exibir)
    // Consulta e altera√ß√£o de permiss√µes (protege telas/rotas de administra√ß√£o de perfis/permiss√µes)
    {
      acao: "Exibir",
      recurso: "Permissoes",
      permitido: true,
      perfilId: perfis.administrador.id,
    },
    {
      acao: "Exibir",
      recurso: "Permissoes",
      permitido: true,
      perfilId: perfis.superAdmin.id,
    },
  ]
  // üîπ Atualiza as permiss√µes corretamente no banco
  for (const permissao of permissoes) {
    await prisma.permissao.upsert({
      where: {
        perfilId_acao_recurso: {
          perfilId: permissao.perfilId,
          acao: permissao.acao,
          recurso: permissao.recurso,
        },
      },
      update: { permitido: permissao.permitido },
      create: permissao,
    })
  }

  console.log(
    "üîπ Criando Usu√°rios a partir de SEED_USERS_JSON ou vari√°veis espec√≠ficas..."
  )
  if (process.env.SEED_USERS_JSON) {
    try {
      const usersToCreate = JSON.parse(process.env.SEED_USERS_JSON)

      if (!Array.isArray(usersToCreate)) {
        throw new Error("SEED_USERS_JSON n√£o √© um array JSON v√°lido.")
      }

      const perfilNameToIdMap = {
        Leitor: perfis.leitor.id,
        Atendente: perfis.atendente.id,
        Supervisor: perfis.supervisor.id,
        Administrador: perfis.administrador.id,
        SuperAdmin: perfis.superAdmin.id,
      }

      for (const userData of usersToCreate) {
        const { email, nome, perfil } = userData

        if (!email || !nome || !perfil) {
          console.warn("‚ö†Ô∏è Usu√°rio com dados incompletos no JSON. Pulando:", userData)
          continue
        }

        const perfilId = perfilNameToIdMap[perfil as keyof typeof perfilNameToIdMap]

        if (!perfilId) {
          console.warn(
            `‚ö†Ô∏è Perfil '${perfil}' para o usu√°rio '${email}' n√£o √© v√°lido. Pulando.`
          )
          continue
        }

        await prisma.user.upsert({
          where: { email },
          update: { nome, perfilId },
          create: { email, nome, perfilId },
        })
      }
      console.log(`‚úÖ ${usersToCreate.length} usu√°rios processados a partir do JSON.`)
    } catch (error) {
      console.error(
        "‚ùå Erro ao processar SEED_USERS_JSON. Verifique o formato do JSON.",
        error
      )
    }
  } else {
    // Fallback: usar vari√°veis individuais no .env (ex.: SEED_ADMIN_EMAIL, SEED_ADMIN_NOME, ...)
    const entries: Array<{ email: string; nome: string; perfil: string }> = []

    const addIfPresent = (perfil: string, emailVar: string, nomeVar: string) => {
      const email = process.env[emailVar]
      const nome = process.env[nomeVar]
      if (email && nome) entries.push({ email, nome, perfil })
    }

    addIfPresent("SuperAdmin", "SEED_SUPERADMIN_EMAIL", "SEED_SUPERADMIN_NOME")
    addIfPresent("Administrador", "SEED_ADMIN_EMAIL", "SEED_ADMIN_NOME")
    addIfPresent("Supervisor", "SEED_SUPERVISOR_EMAIL", "SEED_SUPERVISOR_NOME")
    addIfPresent("Atendente", "SEED_ATENDENTE_EMAIL", "SEED_ATENDENTE_NOME")
    addIfPresent("Leitor", "SEED_LEITOR_EMAIL", "SEED_LEITOR_NOME")

    if (entries.length) {
      const perfilNameToIdMap = {
        Leitor: perfis.leitor.id,
        Atendente: perfis.atendente.id,
        Supervisor: perfis.supervisor.id,
        Administrador: perfis.administrador.id,
        SuperAdmin: perfis.superAdmin.id,
      }

      for (const { email, nome, perfil } of entries) {
        const perfilId = perfilNameToIdMap[perfil as keyof typeof perfilNameToIdMap]
        if (!perfilId) continue
        await prisma.user.upsert({
          where: { email },
          update: { nome, perfilId },
          create: { email, nome, perfilId },
        })
      }
      console.log(`‚úÖ ${entries.length} usu√°rios processados a partir de vari√°veis .env.`)
    } else {
      console.log(
        "‚è© Nenhuma vari√°vel de usu√°rio inicial definida. Pulando cria√ß√£o de usu√°rios."
      )
    }
  }

  console.log("‚úÖ Seed aplicado com sucesso!")
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(() => {
    prisma.$disconnect()
  })
