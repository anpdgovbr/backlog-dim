name: CI
on:
  pull_request:
    branches: ["main", "develop"]
  push:
    branches: ["main", "develop"]

env:
  # DATABASE_URL necessário para Prisma generate (mesmo sem conectar ao banco nos testes)
  DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
  # Desabilita hooks do Husky no ambiente de CI
  HUSKY: "0"
  # Força instalação de devDeps e reduz ruído do npm
  NODE_ENV: development
  npm_config_production: "false"
  NPM_CONFIG_FUND: "false"
  NPM_CONFIG_AUDIT: "false"
  NPM_CONFIG_PROGRESS: "false"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Cache dos artefatos do Prisma para acelerar builds
      - uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            prisma/generated
          key: ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies (ci with safe fallback)
        run: |
          echo "Instalando dependências com npm ci..."
          if npm ci --no-audit --no-fund; then
            echo "npm ci concluído."
          else
            echo "npm ci falhou; tentando npm install (atualiza lock no runner)..."
            npm install --no-audit --no-fund --legacy-peer-deps
          fi

      - name: Ensure Prisma packages present
        run: |
          node -e "try{require.resolve('prisma/package.json');process.exit(0)}catch(e){process.exit(1)}" || npm i -D prisma@6.16.1 --no-audit --no-fund
          node -e "try{require.resolve('@prisma/client/package.json');process.exit(0)}catch(e){process.exit(1)}" || npm i @prisma/client@6.16.1 --no-audit --no-fund

      # Gerar cliente Prisma antes de qualquer checagem (sem auto-instalar via npx)
      - run: npx --no-install prisma generate

      # Checagens estáticas primeiro (mais rápidas)
      - run: npm run type-check
      - run: npm run lint

      # Testes antes do build (falham mais rápido)
      - run: npm test

      # Build por último (mais demorado)
      - run: npm run build
